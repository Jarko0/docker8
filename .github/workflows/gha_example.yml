name: zadanie2obowiazkowe

on:
  workflow_dispatch:
  push:

jobs:
  ci_step:
    name: Build, scan and push Docker image to ghcr
    runs-on: ubuntu-latest
      
    steps:
      - 
        name: Check out the source_repo
        uses: actions/checkout@v4
      
      -
        name: Docker metadata definitions
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: jark0/lab8
          flavor: latest=false
          tags: |
            type=sha,priority=100,prefix=sha-,format=short
            type=semver,priority=200,pattern={{version}}   

      - 
        name: QEMU set-up (for multiarch builds)
        uses: docker/setup-qemu-action@v3

      - 
        name: Buildx set-up (buildx enables multi-platform builds)
        uses: docker/setup-buildx-action@v3

      - 
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - 
        name: Build Docker image (no push yet)
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: false                      # Tylko budujemy, nie wypychamy
          cache-from: |
            type=registry,ref=jark0/lab8:cache
          cache-to: |
            type=registry,ref=jark0/lab8:cache
          tags: jark0/lab8:zadanie        # Tagujemy obraz lokalnie

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        id: scan
        with:
          image-ref: jark0/lab8:zadanie    # Skanujemy lokalny obraz po tagu
          ignore-unfixed: true
          format: 'json'
          output: 'trivy-results.json'
          severity: 'CRITICAL,HIGH'

      - name: Check scan results
        run: |
          # Sprawdzamy czy są podatności krytyczne lub wysokie
          if jq '.Results[].Vulnerabilities | length == 0' trivy-results.json | grep -q false; then
            echo "Critical or high vulnerabilities detected."
            exit 1
          fi

      - 
        name: Push Docker image (only if scan passed)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true                      # Tutaj pushujemy obraz do DockerHub
          cache-from: |
            type=registry,ref=jark0/lab8:cache
          cache-to: |
            type=registry,ref=jark0/lab8:cache
          tags: jark0/lab8:zadanie
