name: zadanie2obowiazkowe

on:
  workflow_dispatch:
  push:

jobs:
  ci_step:
    name: Build, scan and push Docker image to ghcr
    runs-on: ubuntu-latest
      
    steps:
      - 
        name: Check out the source_repo
        uses: actions/checkout@v4       # Pobieramy kod źródłowy repozytorium
      
      -
        name: Docker metadata definitions
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: jark0/lab8             # Nazwa repozytorium obrazu Docker
          flavor: latest=false           # Wyłączamy automatyczny tag 'latest'
          tags: |                       # Definiujemy dodatkowe tagi (sha, semver)
            type=sha,priority=100,prefix=sha-,format=short
            type=semver,priority=200,pattern={{version}}   

      - 
        name: QEMU set-up (for multiarch builds)
        uses: docker/setup-qemu-action@v3   # Przygotowujemy środowisko QEMU do buildów wieloarchitektur

      - 
        name: Buildx set-up (buildx enables multi-platform builds)
        uses: docker/setup-buildx-action@v3 # Konfigurujemy builder buildx dla multiarchitektury

      - 
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}   # Login do DockerHuba zdefiniowany w zmiennych repo
          password: ${{ secrets.DOCKERHUB_TOKEN }}  # Token dostępu do DockerHuba w sekretach repo

      - 
        name: Build Docker image (no push yet)
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64    # Budujemy obrazy dla dwóch architektur
          push: false                           # Budujemy, ale nie wypychamy jeszcze obrazu
          cache-from: "type=registry,ref=jark0/lab8:cache" # Używamy cache z repozytorium
          cache-to: "type=registry,ref=jark0/lab8:cache"   # Aktualizujemy cache po buildzie
          tags: jark0/lab8:zadanie              # Tagujemy obraz lokalnie pod nazwą 'zadanie'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        id: scan
        with:
          image-ref: jark0/lab8:zadanie     # Skanujemy obraz lokalny pod tagiem 'zadanie'
          ignore-unfixed: true               # Ignorujemy podatności niezałatane (unfixed)
          format: 'json'                    # Wynik w formacie JSON
          output: 'trivy-results.json'      # Zapis wyników do pliku
          severity: 'CRITICAL,HIGH'         # Skupiamy się na krytycznych i wysokich podatnościach

      - name: Check scan results
        run: |
          # Sprawdzamy czy skan wykrył podatności krytyczne lub wysokie
          if jq '.Results[].Vulnerabilities | length == 0' trivy-results.json | grep -q false; then
            echo "Critical or high vulnerabilities detected."
            exit 1                         # Przerywamy działanie workflow, jeśli są krytyczne podatności
          fi

      - 
        name: Push Docker image (only if scan passed)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true                         # Wypychamy obraz do DockerHuba jeśli skan przeszedł
          cache-from: "type=registry,ref=jark0/lab8:cache"  # Korzystamy z cache przy pushu
          cache-to: "type=registry,ref=jark0/lab8:cache"    # Aktualizujemy cache
          tags: jark0/lab8:zadanie               # Tag do pushu
